name,description,query,id,parentId,isFolder
Fraud Ring,,,0,,true
Before Neo4j 5,,,1,0,true
üßπ clean in transactions,,"// WARNING!
// This drops all the GDS projections from your current database
//
//CALL gds.graph.list() YIELD graphName AS toDrop
//CALL gds.graph.drop(toDrop) YIELD graphName
//RETURN ""Dropped "" + graphName;


// 
// WARNING! 
// This DROPs all your indexes and constraints
//
CALL apoc.schema.assert({},{});

// WARNING!
// This erase all your DB content
//
MATCH (n)
CALL {WITH n DETACH DELETE n}
IN TRANSACTIONS OF 100 ROWS",2,1,false
‚¨á load sample data,,"// Create all accounts
MERGE (a1:Account {a_id: ""1""})
MERGE (a2:Account {a_id: ""2""})
MERGE (a3:Account {a_id: ""3""})
MERGE (a4:Account {a_id: ""4""})


// Create relationships between accounts
CREATE (a1)-[:TRANSACTION {amount: 1000, currency: ""gbp"", date: datetime()-duration({days: 3})}]->(a2)
CREATE (a2)-[:TRANSACTION {amount: 900, currency: ""gbp"", date: datetime()-duration({days: 2})}]->(a3)
CREATE (a3)-[:TRANSACTION {amount: 810, currency: ""gbp"", date: datetime()-duration({days: 1})}]->(a4)
CREATE (a4)-[:TRANSACTION {amount: 729, currency: ""gbp"", date: datetime()}]->(a1)
CREATE (a2)-[:TRANSACTION {amount: 700, currency: ""gbp"", date: datetime()-duration({days: 6})}]->(a3)
CREATE (a3)-[:TRANSACTION {amount: 978, currency: ""gbp"", date: datetime()-duration({days: 5})}]->(a4)
CREATE (a4)-[:TRANSACTION {amount: 210, currency: ""gbp"", date: datetime()-duration({days: 4})}]->(a1)
CREATE (a1)-[:TRANSACTION {amount: 29, currency: ""gbp"", date: datetime()}]->(a2)",3,1,false
üëÄ show schema,,CALL db.schema.visualization(),4,1,false
üü£ Get constrained node,,"// Get constrained node
MATCH (n:Account {a_id:""2""})
RETURN n",5,1,false
üü£‚Üíüü£ get outgoing tx,,"// Get outgoing tx from node
MATCH (a:Account {a_id:""2""})-[tx:TRANSACTION]->(n)
RETURN a, tx, n",6,1,false
üü£‚Üíüü£‚Üíüü£ get path,,"// Get outgoing path from a node
MATCH path = (a:Account {a_id:""2""})-[tx:TRANSACTION*0..3]->(n)
RETURN path
LIMIT 10",7,1,false
‚≠ïÔ∏è Identify simple transaction ring,,"// Identify simple transaction ring
MATCH path=(a:Account)-[:TRANSACTION*2..6]->(a)
RETURN path",8,1,false
üëØ No duplicate,,"// no duplicate
MATCH path=(a:Account)-[tx:TRANSACTION*2..6]->(a)
WHERE size(apoc.coll.toSet(nodes(path))) = size(nodes(path)) - 1
RETURN path",9,1,false
üóìÔ∏è Monotonic dates,,"// Monotonic dates
MATCH path=(a:Account)-[tx:TRANSACTION*2..6]->(a)
WHERE size(apoc.coll.toSet(nodes(path))) = size(nodes(path)) - 1
AND ALL(idx in range(0, size(tx)-2)
       WHERE (tx[idx]).date < (tx[idx+1]).date
   )
RETURN path",10,1,false
üéØüí∞ 20% retention at each step,,"MATCH path=(a:Account)-[tx:TRANSACTION*2..6]->(a)
WHERE size(apoc.coll.toSet(nodes(path))) = size(nodes(path)) - 1
AND ALL(idx in range(0, size(tx)-2)
       WHERE (tx[idx]).date < (tx[idx+1]).date
       AND tx[idx].amount >= tx[idx+1].amount >= 0.80 * tx[idx].amount
   )
RETURN path",11,1,false
After Neo4j 5,,,12,0,true
üßπ clean in transactions,,"// WARNING!
// This drops all the GDS projections from your current database
//
//CALL gds.graph.list() YIELD graphName AS toDrop
//CALL gds.graph.drop(toDrop) YIELD graphName
//RETURN ""Dropped "" + graphName;


// 
// WARNING! 
// This DROPs all your indexes and constraints
//
CALL apoc.schema.assert({},{});

// WARNING!
// This erase all your DB content
//
MATCH (n)
CALL {WITH n DETACH DELETE n}
IN TRANSACTIONS OF 100 ROWS",13,12,false
‚¨á Refactor to bipartite for QPP,,"// Create all accounts
MERGE (a1:Account {a_id: 1})
MERGE (a2:Account {a_id: 2})
MERGE (a3:Account {a_id: 3})
MERGE (a4:Account {a_id: 4})


// Create relationships between accounts
CREATE (a1)<-[:FROM]-(:Transaction {amount: 1000, currency: ""gbp"", date: datetime()-duration({days: 3})})-[:TO]->(a2)
CREATE (a2)<-[:FROM]-(:Transaction {amount: 900, currency: ""gbp"", date: datetime()-duration({days: 2})})-[:TO]->(a3)
CREATE (a3)<-[:FROM]-(:Transaction {amount: 810, currency: ""gbp"", date: datetime()-duration({days: 1})})-[:TO]->(a4)
CREATE (a4)<-[:FROM]-(:Transaction {amount: 729, currency: ""gbp"", date: datetime()})-[:TO]->(a1)
CREATE (a2)<-[:FROM]-(:Transaction {amount: 700, currency: ""gdp"", date: datetime()-duration({days: 6})})-[:TO]->(a3)
CREATE (a3)<-[:FROM]-(:Transaction {amount: 978, currency: ""gdp"", date: datetime()-duration({days: 5})})-[:TO]->(a4)
CREATE (a4)<-[:FROM]-(:Transaction {amount: 210, currency: ""gdp"", date: datetime()-duration({days: 4})})-[:TO]->(a1)
CREATE (a1)<-[:FROM]-(:Transaction {amount: 29, currency: ""gdp"", date: datetime()})-[:TO]->(a2)",14,12,false
üëÄ show schema,,CALL db.schema.visualization(),15,12,false
‚≠ïÔ∏è QPP simple ring,,"// ‚óñ(‚óó<-‚óã->‚óñ){2,6}‚óó
MATCH (a:Account)
MATCH path=(a)(()<-[:FROM]-()-[:TO]->()){2,6}(a)
RETURN path",16,12,false
üëØ QPP no duplicate,,"MATCH (a:Account)
// ‚óñ(‚óó<-‚óã->‚óñ){2,6}‚óó
MATCH path=(a)((a_i)<-[:FROM]-(tx)-[:TO]->(a_j)){2,6}(a)
WHERE COUNT { WITH a_i UNWIND a_i AS b RETURN DISTINCT b } = size(a_i)
RETURN path",17,12,false
üóìÔ∏è QPP ‚Üó dates,,"// ‚óã
MATCH (a:Account)
// ‚óã<-‚óñ(‚óó<-‚óã->‚óñ){2,6}‚óó->‚óã
MATCH path=(a)<-[:FROM]-(first_tx)
    ((tx_i)-[:TO]->(a_i)<-[:FROM]-(tx_j)
        WHERE tx_i.date < tx_j.date
    ){2,6}
    (last_tx)-[:TO]->(a)
WHERE COUNT { WITH a, a_i UNWIND [a] + a_i AS b RETURN DISTINCT b } = size([a] + a_i)
RETURN path",18,12,false
üéØüí∞ QPP 20% retention,,"// ‚óã
MATCH (a:Account)
// ‚óã<-‚óñ(‚óó<-‚óã->‚óñ)+‚óó->‚óã
MATCH path=(a)<-[:FROM]-(first_tx)
    ((tx_i)-[:TO]->(a_i)<-[:FROM]-(tx_j)
        WHERE tx_i.date < tx_j.date
        AND tx_i.amount >= tx_j.amount >= 0.80 * tx_i.amount
    )+
    (last_tx)-[:TO]->(a)
WHERE COUNT { WITH a, a_i UNWIND [a] + a_i AS b RETURN DISTINCT b } = size([a] + a_i)
RETURN path",19,12,false
‚¨á ingest 1000 rels dataset,,":param  file_path_root => 'https://raw.githubusercontent.com/halftermeyer/fraud-detection-training/main/data/data_csv/small/';
:param file_0 => 'accounts.csv';
:param file_1 => 'txs.csv';

// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 5.12-aura.
CREATE CONSTRAINT `imp_uniq_Account_a_id` IF NOT EXISTS
FOR (n: `Account`)
REQUIRE (n.`a_id`) IS UNIQUE;
CREATE CONSTRAINT `imp_uniq_Transaction_tx_id` IF NOT EXISTS
FOR (n: `Transaction`)
REQUIRE (n.`tx_id`) IS UNIQUE;

:param idsToSkip => [];

// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`a_id` IN $idsToSkip AND NOT row.`a_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Account` { `a_id`: row.`a_id` })
  SET n.`name` = row.`name`
  SET n.`email` = row.`email`
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row
WHERE NOT row.`tx_id` IN $idsToSkip AND NOT row.`tx_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Transaction` { `tx_id`: row.`tx_id` })
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`date` = datetime(row.`date`)
  SET n.`amount` = toFloat(trim(row.`amount`))
} IN TRANSACTIONS OF 10000 ROWS;


// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Transaction` { `tx_id`: row.`tx_id` })
  MATCH (target: `Account` { `a_id`: row.`to_id` })
  MERGE (source)-[r: `TO`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Transaction` { `tx_id`: row.`tx_id` })
  MATCH (target: `Account` { `a_id`: row.`from_id` })
  MERGE (source)-[r: `FROM`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;",20,12,false
‚¨á ingest 100K rels dataset,,":param  file_path_root => 'https://raw.githubusercontent.com/halftermeyer/fraud-detection-training/main/data/data_csv/big/';
:param file_0 => 'accounts.csv';
:param file_1 => 'txs.csv';

// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 5.12-aura.
CREATE CONSTRAINT `imp_uniq_Account_a_id` IF NOT EXISTS
FOR (n: `Account`)
REQUIRE (n.`a_id`) IS UNIQUE;
CREATE CONSTRAINT `imp_uniq_Transaction_tx_id` IF NOT EXISTS
FOR (n: `Transaction`)
REQUIRE (n.`tx_id`) IS UNIQUE;

:param idsToSkip => [];

// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`a_id` IN $idsToSkip AND NOT row.`a_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Account` { `a_id`: row.`a_id` })
  SET n.`name` = row.`name`
  SET n.`email` = row.`email`
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row
WHERE NOT row.`tx_id` IN $idsToSkip AND NOT row.`tx_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Transaction` { `tx_id`: row.`tx_id` })
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  SET n.`date` = datetime(row.`date`)
  SET n.`amount` = toFloat(trim(row.`amount`))
} IN TRANSACTIONS OF 10000 ROWS;


// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Transaction` { `tx_id`: row.`tx_id` })
  MATCH (target: `Account` { `a_id`: row.`to_id` })
  MERGE (source)-[r: `TO`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;

LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Transaction` { `tx_id`: row.`tx_id` })
  MATCH (target: `Account` { `a_id`: row.`from_id` })
  MERGE (source)-[r: `FROM`]->(target)
} IN TRANSACTIONS OF 10000 ROWS;",21,12,false
ü™° short path needle,,"// Create all accounts
MERGE (a1:Account {a_id: 1})
MERGE (a2:Account {a_id: 2})
MERGE (a3:Account {a_id: 3})
MERGE (a4:Account {a_id: 4})


// Create relationships between accounts
CREATE (a1)<-[:FROM]-(:Transaction {amount: 1000, currency: ""gbp"", date: datetime()-duration({days: 3})})-[:TO]->(a2)
CREATE (a2)<-[:FROM]-(:Transaction {amount: 900, currency: ""gbp"", date: datetime()-duration({days: 2})})-[:TO]->(a3)
CREATE (a3)<-[:FROM]-(:Transaction {amount: 810, currency: ""gbp"", date: datetime()-duration({days: 1})})-[:TO]->(a4)
CREATE (a4)<-[:FROM]-(:Transaction {amount: 729, currency: ""gbp"", date: datetime()})-[:TO]->(a1)
CREATE (a2)<-[:FROM]-(:Transaction {amount: 700, currency: ""gdp"", date: datetime()-duration({days: 6})})-[:TO]->(a3)
CREATE (a3)<-[:FROM]-(:Transaction {amount: 978, currency: ""gdp"", date: datetime()-duration({days: 5})})-[:TO]->(a4)
CREATE (a4)<-[:FROM]-(:Transaction {amount: 210, currency: ""gdp"", date: datetime()-duration({days: 4})})-[:TO]->(a1)
CREATE (a1)<-[:FROM]-(:Transaction {amount: 29, currency: ""gdp"", date: datetime()})-[:TO]->(a2)",22,12,false
ü™° long path needle,,"// add long path needle to haystack

// Create all accounts
MERGE (a1:Account {a_id: ""1""})
MERGE (a2:Account {a_id: ""2""})
MERGE (a3:Account {a_id: ""3""})
MERGE (a4:Account {a_id: ""4""})
MERGE (a5:Account {a_id: ""5""})
MERGE (a6:Account {a_id: ""6""})
MERGE (a7:Account {a_id: ""7""})
MERGE (a8:Account {a_id: ""8""})
MERGE (a9:Account {a_id: ""9""})
MERGE (a10:Account {a_id: ""10""})
MERGE (a11:Account {a_id: ""11""})
MERGE (a12:Account {a_id: ""12""})
MERGE (a13:Account {a_id: ""13""})
MERGE (a14:Account {a_id: ""14""})
MERGE (a15:Account {a_id: ""15""})
MERGE (a16:Account {a_id: ""16""})

// Create relationships between accounts
CREATE (a1)<-[:FROM]-(:Transaction {amount: 1000, currency: ""gbp"", date: datetime()-duration({days: 20})})-[:TO]->(a2)
CREATE (a2)<-[:FROM]-(:Transaction {amount: 999, currency: ""gbp"", date: datetime()-duration({days: 19})})-[:TO]->(a3)
CREATE (a3)<-[:FROM]-(:Transaction {amount: 998, currency: ""gbp"", date: datetime()-duration({days: 18})})-[:TO]->(a4)
CREATE (a4)<-[:FROM]-(:Transaction {amount: 997, currency: ""gbp"", date: datetime()-duration({days: 17})})-[:TO]->(a5)
CREATE (a5)<-[:FROM]-(:Transaction {amount: 996, currency: ""gbp"", date: datetime()-duration({days: 16})})-[:TO]->(a6)
CREATE (a6)<-[:FROM]-(:Transaction {amount: 995, currency: ""gbp"", date: datetime()-duration({days: 15})})-[:TO]->(a7)
CREATE (a7)<-[:FROM]-(:Transaction {amount: 994, currency: ""gbp"", date: datetime()-duration({days: 14})})-[:TO]->(a8)
CREATE (a8)<-[:FROM]-(:Transaction {amount: 993, currency: ""gbp"", date: datetime()-duration({days: 13})})-[:TO]->(a9)
CREATE (a9)<-[:FROM]-(:Transaction {amount: 992, currency: ""gbp"", date: datetime()-duration({days: 12})})-[:TO]->(a10)
CREATE (a10)<-[:FROM]-(:Transaction {amount: 991, currency: ""gbp"", date: datetime()-duration({days: 11})})-[:TO]->(a11)
CREATE (a11)<-[:FROM]-(:Transaction {amount: 990, currency: ""gbp"", date: datetime()-duration({days: 10})})-[:TO]->(a12)
CREATE (a12)<-[:FROM]-(:Transaction {amount: 989, currency: ""gbp"", date: datetime()-duration({days: 9})})-[:TO]->(a13)
CREATE (a13)<-[:FROM]-(:Transaction {amount: 988, currency: ""gbp"", date: datetime()-duration({days: 8})})-[:TO]->(a14)
CREATE (a14)<-[:FROM]-(:Transaction {amount: 987, currency: ""gbp"", date: datetime()-duration({days: 7})})-[:TO]->(a15)
CREATE (a15)<-[:FROM]-(:Transaction {amount: 986, currency: ""gbp"", date: datetime()-duration({days: 6})})-[:TO]->(a16)
CREATE (a16)<-[:FROM]-(:Transaction {amount: 985, currency: ""gdp"", date: datetime()-duration({days: 5})})-[:TO]->(a1);",23,12,false
ü™°  huge path needle,,"WITH 100 AS length
UNWIND range(1,length) AS ix
MERGE (a:Account {a_id:toString(ix)})
MERGE (b:Account {a_id:toString(CASE (ix+1)%length WHEN  0 THEN length ELSE (ix+1)%length END)})
CREATE (a)<-[:FROM]-(:Transaction {test:true, amount: (1000*length)-ix, date: datetime()-duration({days: length - ix})})-[:TO]->(b);",24,12,false
RBAC,,,25,0,true
üßπ RBAC,,"DROP ROLE anti_fraud IF EXISTS;
DROP ROLE data_science IF EXISTS;
DROP USER Anthony IF EXISTS;
DROP USER Daniela IF EXISTS;",26,25,false
üë® create Anti-Fraud User,,"// as admin
CREATE USER Anthony IF NOT EXISTS
    SET PASSWORD 'password'
    SET PASSWORD CHANGE NOT REQUIRED
    SET HOME DATABASE neo4j;",27,25,false
üëÄ show users,,"// as admin
SHOW USERS",28,25,false
üü£‚Üíüü¢ get some data,,"// as Anthony
MATCH (a:Account)
WITH a LIMIT 1
OPTIONAL MATCH (a)-[r:FROM|TO]-(t:Transaction)
RETURN a, r, t",29,25,false
üëÆ‚Äç‚ôÇÔ∏è create role anti_fraud,,"// as admin
CREATE ROLE anti_fraud IF NOT EXISTS AS COPY OF reader;",30,25,false
üëÆ‚Äç‚ôÇÔ∏è‚Üíüë® grant role anti_fraud,,"// as admin
GRANT ROLE anti_fraud TO Anthony",31,25,false
üë® : üü£‚Üíüü¢ get some data II,,"// as Anthony
MATCH (a:Account)
WITH a LIMIT 1
OPTIONAL MATCH (a)-[r:FROM|TO]-(t:Transaction)
RETURN a{.a_id,.name,.email} AS account, CASE type(r) WHEN ""FROM"" THEN ""sent"" ELSE ""was sent"" END AS verb, t.amount AS amount;",32,25,false
üë® : üü£‚Üíüü¢ get some data III,,"// as Anthony
MATCH (a:Account)
WITH a LIMIT 1
RETURN a{.a_id, .name, .email},
    [(a)-[r:TO|FROM]-(t:Transaction) |
        {role:CASE type(r) WHEN ""FROM"" THEN ""sender"" ELSE ""beneficiary"" END,
        amount:t.amount}
    ] AS transactions;",33,25,false
üë®‚Äçüíº : ¬¨Ôº†‚ÜíüëÆ‚Äç‚ôÇÔ∏è deny PII to anti_fraud,,"// as admin
DENY READ {name, email}
ON HOME GRAPH
NODES Account TO anti_fraud;",34,25,false
üëÄ show anti_fraud DENIED,,"// as admin
SHOW PRIVILEGES
WHERE role = ""anti_fraud"" AND access = ""DENIED""",35,25,false
‚¨á ingest 1000 rels dataset,,":param  file_path_root => 'https://raw.githubusercontent.com/halftermeyer/fraud-detection-training/main/data/data_csv/small/';
:param file_0 => 'accounts.csv';
:param file_1 => 'txs.csv';

// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 5.12-aura.
CREATE CONSTRAINT `imp_uniq_Account_a_id` IF NOT EXISTS
FOR (n: `Account`)
REQUIRE (n.`a_id`) IS UNIQUE;

:param idsToSkip => [];

// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`a_id` IN $idsToSkip AND NOT row.`a_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Account` { `a_id`: row.`a_id` })
  SET n.`name` = row.`name`
  SET n.`email` = row.`email`
} IN TRANSACTIONS OF 10000 ROWS;


// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Account` { `a_id`: row.`from_id` })
  MATCH (target: `Account` { `a_id`: row.`to_id` })
  MERGE (source)-[r: `TRANSACTION`]->(target)
  SET r.`tx_id` = row.`tx_id`
  SET r.`amount` = toFloat(trim(row.`amount`))
  SET r.`date` = datetime(row.`date`)
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  // SET r.`date` = datetime(row.`date`)
} IN TRANSACTIONS OF 10000 ROWS;",36,1,false
‚¨á ingest 100K rels dataset,,":param  file_path_root => 'https://raw.githubusercontent.com/halftermeyer/fraud-detection-training/main/data/data_csv/big/';
:param file_0 => 'accounts.csv';
:param file_1 => 'txs.csv';

// CONSTRAINT creation
// -------------------
//
// Create node uniqueness constraints, ensuring no duplicates for the given node label and ID property exist in the database. This also ensures no duplicates are introduced in future.
//
// NOTE: The following constraint creation syntax is generated based on the current connected database version 5.12-aura.
CREATE CONSTRAINT `imp_uniq_Account_a_id` IF NOT EXISTS
FOR (n: `Account`)
REQUIRE (n.`a_id`) IS UNIQUE;

:param idsToSkip => [];

// NODE load
// ---------
//
// Load nodes in batches, one node label at a time. Nodes will be created using a MERGE statement to ensure a node with the same label and ID property remains unique. Pre-existing nodes found by a MERGE statement will have their other properties set to the latest values encountered in a load file.
//
// NOTE: Any nodes with IDs in the 'idsToSkip' list parameter will not be loaded.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_0) AS row
WITH row
WHERE NOT row.`a_id` IN $idsToSkip AND NOT row.`a_id` IS NULL
CALL {
  WITH row
  MERGE (n: `Account` { `a_id`: row.`a_id` })
  SET n.`name` = row.`name`
  SET n.`email` = row.`email`
} IN TRANSACTIONS OF 10000 ROWS;


// RELATIONSHIP load
// -----------------
//
// Load relationships in batches, one relationship type at a time. Relationships are created using a MERGE statement, meaning only one relationship of a given type will ever be created between a pair of nodes.
LOAD CSV WITH HEADERS FROM ($file_path_root + $file_1) AS row
WITH row 
CALL {
  WITH row
  MATCH (source: `Account` { `a_id`: row.`from_id` })
  MATCH (target: `Account` { `a_id`: row.`to_id` })
  MERGE (source)-[r: `TRANSACTION`]->(target)
  SET r.`tx_id` = row.`tx_id`
  SET r.`amount` = toFloat(trim(row.`amount`))
  SET r.`date` = datetime(row.`date`)
  // Your script contains the datetime datatype. Our app attempts to convert dates to ISO 8601 date format before passing them to the Cypher function.
  // This conversion cannot be done in a Cypher script load. Please ensure that your CSV file columns are in ISO 8601 date format to ensure equivalent loads.
  // SET r.`date` = datetime(row.`date`)
} IN TRANSACTIONS OF 10000 ROWS;",37,1,false